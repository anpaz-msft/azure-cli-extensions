# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AccountStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CREATING = "Creating"
    CREATED = "Created"
    UPDATING = "Updating"
    DELETING = "Deleting"
    FAILED = "Failed"

class CheckpointRetentionMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TTL = "Ttl"
    MAX_STORAGE = "MaxStorage"

class CompilationMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    OPTMIZED_STATIC = "OptmizedStatic"
    STATIC = "Static"
    EAGER = "Eager"

class FrameworkKind(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    TENSOR_FLOW = "TensorFlow"
    PY_TORCH = "PyTorch"

class IdleResourcesHandlingMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AUTO_SUSPEND = "AutoSuspend"
    AUTO_DELETE = "AutoDelete"

class JobStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CREATING = "Creating"
    CREATED = "Created"
    APPROVING = "Approving"
    APPROVED = "Approved"
    STARTING = "Starting"
    RUNNING = "Running"
    SUSPENDING = "Suspending"
    SUSPENDED = "Suspended"
    RESUMING = "Resuming"
    DELETING = "Deleting"
    ERROR = "Error"
    FAILED = "Failed"
    COMPLETED = "Completed"

class ParallelismStrategy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISTRIBUTED_DATA_PARALLEL = "DistributedDataParallel"
    MODEL_PARALLEL = "ModelParallel"
    PIPELINE_PARALLEL = "PipelineParallel"
    ZE_RO_DISTRIBUTED_DATA_PARALLEL = "ZeRODistributedDataParallel"

class PolicyStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CREATING = "Creating"
    CREATED = "Created"
    UPDATING = "Updating"
    DELETING = "Deleting"
    FAILED = "Failed"

class ProtocolType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    HTTPS = "Https"
    TCP = "Tcp"
    WEB_SOCKET = "WebSocket"
    SSH = "Ssh"

class ProvisioningState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    CREATING = "Creating"
    UPDATING = "Updating"
    DELETING = "Deleting"

class SchedulingMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DEFAULT = "Default"
    PRIORITY = "Priority"
    FIFO = "FIFO"
    FAIR_SHARE = "FairShare"

class SchedulingPriority(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class StorageContainerStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    CREATING = "Creating"
    CREATED = "Created"
    UPDATING = "Updating"
    DELETING = "Deleting"
    FAILED = "Failed"

class StorageContainerTier(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    COLD = "Cold"
    WARM = "Warm"
    HOT = "Hot"

class StorageSourceKind(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AZURE_AI_SUPERCOMPUTER_STORAGE = "AzureAISupercomputerStorage"
    AZURE_BLOB_STORAGE = "AzureBlobStorage"
    AZURE_FILE_STORAGE = "AzureFileStorage"
