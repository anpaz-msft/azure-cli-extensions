# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._ai_supercomputer_management_client_enums import *


class AccountLocation(msrest.serialization.Model):
    """Describes the properties of an Account location resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the account location.
    :type name: str
    :param failover_priority: Required. The failover priority of the location. Failover priority
     values must be unique for each of the locations associated with the account.
    :type failover_priority: int
    :ivar is_zone_redundant: Indicates whether or not this location has AvailabilityZone enabled.
    :vartype is_zone_redundant: bool
    """

    _validation = {
        'name': {'required': True},
        'failover_priority': {'required': True, 'maximum': 2147483647, 'minimum': 1},
        'is_zone_redundant': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'failover_priority': {'key': 'failoverPriority', 'type': 'int'},
        'is_zone_redundant': {'key': 'isZoneRedundant', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        name: str,
        failover_priority: int,
        **kwargs
    ):
        super(AccountLocation, self).__init__(**kwargs)
        self.name = name
        self.failover_priority = failover_priority
        self.is_zone_redundant = None


class AccountPatchProperties(msrest.serialization.Model):
    """Describes all properties which can be updated for a Singularity account resource.

    :param description: User-friendly description of an account.
    :type description: str
    :param locations: The collection of account locations.
    :type locations: list[~ai_supercomputer_management_client.models.AccountLocation]
    :param subnet_id: The resource id of the delegated subnet.
    :type subnet_id: str
    :param idle_resources_handling_mode:  Possible values include: "AutoSuspend", "AutoDelete".
    :type idle_resources_handling_mode: str or
     ~ai_supercomputer_management_client.models.IdleResourcesHandlingMode
    :param scheduling_mode:  Possible values include: "Default", "Priority", "FIFO", "FairShare".
    :type scheduling_mode: str or ~ai_supercomputer_management_client.models.SchedulingMode
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[AccountLocation]'},
        'subnet_id': {'key': 'networkSettings.subnetId', 'type': 'str'},
        'idle_resources_handling_mode': {'key': 'idleResourcesHandlingPolicy.idleResourcesHandlingMode', 'type': 'str'},
        'scheduling_mode': {'key': 'schedulingPolicy.schedulingMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        locations: Optional[List["AccountLocation"]] = None,
        subnet_id: Optional[str] = None,
        idle_resources_handling_mode: Optional[Union[str, "IdleResourcesHandlingMode"]] = None,
        scheduling_mode: Optional[Union[str, "SchedulingMode"]] = None,
        **kwargs
    ):
        super(AccountPatchProperties, self).__init__(**kwargs)
        self.description = description
        self.locations = locations
        self.subnet_id = subnet_id
        self.idle_resources_handling_mode = idle_resources_handling_mode
        self.scheduling_mode = scheduling_mode


class AccountProperties(msrest.serialization.Model):
    """Describes the properties of an Account resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of an account.
    :type description: str
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.AccountStatus
    :ivar status_details: Gives additional information about the current status of an account.
    :vartype status_details: str
    :param locations: Required. The collection of account locations.
    :type locations: list[~ai_supercomputer_management_client.models.AccountLocation]
    :param subnet_id: The resource id of the delegated subnet.
    :type subnet_id: str
    :param idle_resources_handling_mode:  Possible values include: "AutoSuspend", "AutoDelete".
    :type idle_resources_handling_mode: str or
     ~ai_supercomputer_management_client.models.IdleResourcesHandlingMode
    :param scheduling_mode:  Possible values include: "Default", "Priority", "FIFO", "FairShare".
    :type scheduling_mode: str or ~ai_supercomputer_management_client.models.SchedulingMode
    """

    _validation = {
        'status_details': {'readonly': True},
        'locations': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[AccountLocation]'},
        'subnet_id': {'key': 'networkSettings.subnetId', 'type': 'str'},
        'idle_resources_handling_mode': {'key': 'idleResourcesHandlingPolicy.idleResourcesHandlingMode', 'type': 'str'},
        'scheduling_mode': {'key': 'schedulingPolicy.schedulingMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        locations: List["AccountLocation"],
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "AccountStatus"]] = None,
        subnet_id: Optional[str] = None,
        idle_resources_handling_mode: Optional[Union[str, "IdleResourcesHandlingMode"]] = None,
        scheduling_mode: Optional[Union[str, "SchedulingMode"]] = None,
        **kwargs
    ):
        super(AccountProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.status = status
        self.status_details = None
        self.locations = locations
        self.subnet_id = subnet_id
        self.idle_resources_handling_mode = idle_resources_handling_mode
        self.scheduling_mode = scheduling_mode


class AccountQuotaPolicyPatchProperties(msrest.serialization.Model):
    """Describes all properties which can be updated for a Singularity account quota policy resource.

    :param description: User-friendly description of an AccountQuotaPolicy.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        super(AccountQuotaPolicyPatchProperties, self).__init__(**kwargs)
        self.description = description
        self.quotas = quotas


class AccountQuotaPolicyProperties(msrest.serialization.Model):
    """Describes properties of AccountQuotaPolicy resource.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.PolicyStatus
    :param description: User-friendly description of an AccountQuotaPolicy.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional[Union[str, "PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        super(AccountQuotaPolicyProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas


class Resource(msrest.serialization.Model):
    """The resource model definition for Azure Resource Manager resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = system_data


class AccountQuotaPolicyResourceDescription(Resource):
    """Describes an account quota policy resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.PolicyStatus
    :param description: User-friendly description of an AccountQuotaPolicy.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'quotas': {'key': 'properties.quotas', 'type': '[InstanceTypeSeriesQuota]'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional[Union[str, "PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        super(AccountQuotaPolicyResourceDescription, self).__init__(system_data=system_data, **kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas


class AccountQuotaPolicyResourceDescriptionList(msrest.serialization.Model):
    """A pageable list of AccountQuotaPolicy resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value:
     list[~ai_supercomputer_management_client.models.AccountQuotaPolicyResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AccountQuotaPolicyResourceDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AccountQuotaPolicyResourceDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class AccountQuotaPolicyResourceDescriptionProperties(AccountQuotaPolicyProperties):
    """AccountQuotaPolicyResourceDescriptionProperties.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.PolicyStatus
    :param description: User-friendly description of an AccountQuotaPolicy.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional[Union[str, "PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        super(AccountQuotaPolicyResourceDescriptionProperties, self).__init__(provisioning_state=provisioning_state, status=status, description=description, quotas=quotas, **kwargs)


class AccountQuotaPolicyResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity account quota policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param description: User-friendly description of an AccountQuotaPolicy.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'quotas': {'key': 'properties.quotas', 'type': '[InstanceTypeSeriesQuota]'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        super(AccountQuotaPolicyResourcePatchDescription, self).__init__(system_data=system_data, **kwargs)
        self.description = description
        self.quotas = quotas


class AccountQuotaPolicyResourcePatchDescriptionProperties(AccountQuotaPolicyPatchProperties):
    """AccountQuotaPolicyResourcePatchDescriptionProperties.

    :param description: User-friendly description of an AccountQuotaPolicy.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        **kwargs
    ):
        super(AccountQuotaPolicyResourcePatchDescriptionProperties, self).__init__(description=description, quotas=quotas, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for Azure Resource Manager tracked top-level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        location: str,
        system_data: Optional["ResourceSystemData"] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(system_data=system_data, **kwargs)
        self.location = location
        self.tags = tags


class AccountResourceDescription(TrackedResource):
    """Describes an account resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of an account.
    :type description: str
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.AccountStatus
    :ivar status_details: Gives additional information about the current status of an account.
    :vartype status_details: str
    :param locations: Required. The collection of account locations.
    :type locations: list[~ai_supercomputer_management_client.models.AccountLocation]
    :param subnet_id: The resource id of the delegated subnet.
    :type subnet_id: str
    :param idle_resources_handling_mode:  Possible values include: "AutoSuspend", "AutoDelete".
    :type idle_resources_handling_mode: str or
     ~ai_supercomputer_management_client.models.IdleResourcesHandlingMode
    :param scheduling_mode:  Possible values include: "Default", "Priority", "FIFO", "FairShare".
    :type scheduling_mode: str or ~ai_supercomputer_management_client.models.SchedulingMode
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'status_details': {'readonly': True},
        'locations': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'locations': {'key': 'properties.locations', 'type': '[AccountLocation]'},
        'subnet_id': {'key': 'properties.networkSettings.subnetId', 'type': 'str'},
        'idle_resources_handling_mode': {'key': 'properties.idleResourcesHandlingPolicy.idleResourcesHandlingMode', 'type': 'str'},
        'scheduling_mode': {'key': 'properties.schedulingPolicy.schedulingMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        locations: List["AccountLocation"],
        system_data: Optional["ResourceSystemData"] = None,
        tags: Optional[Dict[str, str]] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "AccountStatus"]] = None,
        subnet_id: Optional[str] = None,
        idle_resources_handling_mode: Optional[Union[str, "IdleResourcesHandlingMode"]] = None,
        scheduling_mode: Optional[Union[str, "SchedulingMode"]] = None,
        **kwargs
    ):
        super(AccountResourceDescription, self).__init__(system_data=system_data, location=location, tags=tags, **kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.status = status
        self.status_details = None
        self.locations = locations
        self.subnet_id = subnet_id
        self.idle_resources_handling_mode = idle_resources_handling_mode
        self.scheduling_mode = scheduling_mode


class AccountResourceDescriptionList(msrest.serialization.Model):
    """A pageable list of Account resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~ai_supercomputer_management_client.models.AccountResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AccountResourceDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AccountResourceDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class AccountResourceDescriptionProperties(AccountProperties):
    """AccountResourceDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of an account.
    :type description: str
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.AccountStatus
    :ivar status_details: Gives additional information about the current status of an account.
    :vartype status_details: str
    :param locations: Required. The collection of account locations.
    :type locations: list[~ai_supercomputer_management_client.models.AccountLocation]
    :param subnet_id: The resource id of the delegated subnet.
    :type subnet_id: str
    :param idle_resources_handling_mode:  Possible values include: "AutoSuspend", "AutoDelete".
    :type idle_resources_handling_mode: str or
     ~ai_supercomputer_management_client.models.IdleResourcesHandlingMode
    :param scheduling_mode:  Possible values include: "Default", "Priority", "FIFO", "FairShare".
    :type scheduling_mode: str or ~ai_supercomputer_management_client.models.SchedulingMode
    """

    _validation = {
        'status_details': {'readonly': True},
        'locations': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[AccountLocation]'},
        'subnet_id': {'key': 'networkSettings.subnetId', 'type': 'str'},
        'idle_resources_handling_mode': {'key': 'idleResourcesHandlingPolicy.idleResourcesHandlingMode', 'type': 'str'},
        'scheduling_mode': {'key': 'schedulingPolicy.schedulingMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        locations: List["AccountLocation"],
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "AccountStatus"]] = None,
        subnet_id: Optional[str] = None,
        idle_resources_handling_mode: Optional[Union[str, "IdleResourcesHandlingMode"]] = None,
        scheduling_mode: Optional[Union[str, "SchedulingMode"]] = None,
        **kwargs
    ):
        super(AccountResourceDescriptionProperties, self).__init__(provisioning_state=provisioning_state, description=description, status=status, locations=locations, subnet_id=subnet_id, idle_resources_handling_mode=idle_resources_handling_mode, scheduling_mode=scheduling_mode, **kwargs)


class AccountResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity account resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param description: User-friendly description of an account.
    :type description: str
    :param locations: The collection of account locations.
    :type locations: list[~ai_supercomputer_management_client.models.AccountLocation]
    :param subnet_id: The resource id of the delegated subnet.
    :type subnet_id: str
    :param idle_resources_handling_mode:  Possible values include: "AutoSuspend", "AutoDelete".
    :type idle_resources_handling_mode: str or
     ~ai_supercomputer_management_client.models.IdleResourcesHandlingMode
    :param scheduling_mode:  Possible values include: "Default", "Priority", "FIFO", "FairShare".
    :type scheduling_mode: str or ~ai_supercomputer_management_client.models.SchedulingMode
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'locations': {'key': 'properties.locations', 'type': '[AccountLocation]'},
        'subnet_id': {'key': 'properties.networkSettings.subnetId', 'type': 'str'},
        'idle_resources_handling_mode': {'key': 'properties.idleResourcesHandlingPolicy.idleResourcesHandlingMode', 'type': 'str'},
        'scheduling_mode': {'key': 'properties.schedulingPolicy.schedulingMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        description: Optional[str] = None,
        locations: Optional[List["AccountLocation"]] = None,
        subnet_id: Optional[str] = None,
        idle_resources_handling_mode: Optional[Union[str, "IdleResourcesHandlingMode"]] = None,
        scheduling_mode: Optional[Union[str, "SchedulingMode"]] = None,
        **kwargs
    ):
        super(AccountResourcePatchDescription, self).__init__(system_data=system_data, **kwargs)
        self.description = description
        self.locations = locations
        self.subnet_id = subnet_id
        self.idle_resources_handling_mode = idle_resources_handling_mode
        self.scheduling_mode = scheduling_mode


class AccountResourcePatchDescriptionProperties(AccountPatchProperties):
    """AccountResourcePatchDescriptionProperties.

    :param description: User-friendly description of an account.
    :type description: str
    :param locations: The collection of account locations.
    :type locations: list[~ai_supercomputer_management_client.models.AccountLocation]
    :param subnet_id: The resource id of the delegated subnet.
    :type subnet_id: str
    :param idle_resources_handling_mode:  Possible values include: "AutoSuspend", "AutoDelete".
    :type idle_resources_handling_mode: str or
     ~ai_supercomputer_management_client.models.IdleResourcesHandlingMode
    :param scheduling_mode:  Possible values include: "Default", "Priority", "FIFO", "FairShare".
    :type scheduling_mode: str or ~ai_supercomputer_management_client.models.SchedulingMode
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[AccountLocation]'},
        'subnet_id': {'key': 'networkSettings.subnetId', 'type': 'str'},
        'idle_resources_handling_mode': {'key': 'idleResourcesHandlingPolicy.idleResourcesHandlingMode', 'type': 'str'},
        'scheduling_mode': {'key': 'schedulingPolicy.schedulingMode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        locations: Optional[List["AccountLocation"]] = None,
        subnet_id: Optional[str] = None,
        idle_resources_handling_mode: Optional[Union[str, "IdleResourcesHandlingMode"]] = None,
        scheduling_mode: Optional[Union[str, "SchedulingMode"]] = None,
        **kwargs
    ):
        super(AccountResourcePatchDescriptionProperties, self).__init__(description=description, locations=locations, subnet_id=subnet_id, idle_resources_handling_mode=idle_resources_handling_mode, scheduling_mode=scheduling_mode, **kwargs)


class AvailableInstanceTypeDescription(msrest.serialization.Model):
    """Instance type available in the location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name for the instance type.
    :vartype name: str
    """

    _validation = {
        'name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AvailableInstanceTypeDescription, self).__init__(**kwargs)
        self.name = None


class AvailableInstanceTypeDescriptionList(msrest.serialization.Model):
    """A pageable list of available instance types.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value:
     list[~ai_supercomputer_management_client.models.AvailableInstanceTypeDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailableInstanceTypeDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AvailableInstanceTypeDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class AvailableInstanceTypeSeriesDescription(msrest.serialization.Model):
    """Instance type series available in the location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique identifier for the instance type series.
    :vartype id: str
    :ivar name: Descriptive name for the instance type series.
    :vartype name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AvailableInstanceTypeSeriesDescription, self).__init__(**kwargs)
        self.id = None
        self.name = None


class AvailableInstanceTypeSeriesDescriptionList(msrest.serialization.Model):
    """A pageable list of available instance type series.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value:
     list[~ai_supercomputer_management_client.models.AvailableInstanceTypeSeriesDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailableInstanceTypeSeriesDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AvailableInstanceTypeSeriesDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class CheckpointPolicy(msrest.serialization.Model):
    """Describes the checkpointing policy for job.

    :param enable_checkpoint: Enables automatic checkpointing of training job.
    :type enable_checkpoint: bool
    :param checkpoint_relative_path: The relative path in the platform storage.
    :type checkpoint_relative_path: str
    :param checkpoint_interval: Maximum elapsed duration between subsequent checkpoints. The value
     should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
    :type checkpoint_interval: ~datetime.timedelta
    :param checkpoint_iteration_count: Maximum elapsed iteration count between the subsequent
     checkpoints.
    :type checkpoint_iteration_count: int
    :param checkpoint_retention_policy: Describes the checkpointing retention policy for job.
    :type checkpoint_retention_policy:
     ~ai_supercomputer_management_client.models.CheckpointRetentionPolicy
    """

    _attribute_map = {
        'enable_checkpoint': {'key': 'enableCheckpoint', 'type': 'bool'},
        'checkpoint_relative_path': {'key': 'checkpointRelativePath', 'type': 'str'},
        'checkpoint_interval': {'key': 'checkpointInterval', 'type': 'duration'},
        'checkpoint_iteration_count': {'key': 'checkpointIterationCount', 'type': 'int'},
        'checkpoint_retention_policy': {'key': 'checkpointRetentionPolicy', 'type': 'CheckpointRetentionPolicy'},
    }

    def __init__(
        self,
        *,
        enable_checkpoint: Optional[bool] = None,
        checkpoint_relative_path: Optional[str] = None,
        checkpoint_interval: Optional[datetime.timedelta] = None,
        checkpoint_iteration_count: Optional[int] = None,
        checkpoint_retention_policy: Optional["CheckpointRetentionPolicy"] = None,
        **kwargs
    ):
        super(CheckpointPolicy, self).__init__(**kwargs)
        self.enable_checkpoint = enable_checkpoint
        self.checkpoint_relative_path = checkpoint_relative_path
        self.checkpoint_interval = checkpoint_interval
        self.checkpoint_iteration_count = checkpoint_iteration_count
        self.checkpoint_retention_policy = checkpoint_retention_policy


class CheckpointRetentionPolicy(msrest.serialization.Model):
    """Describes the checkpointing retention policy for job.

    All required parameters must be populated in order to send to Azure.

    :param mode: Required.  Possible values include: "Ttl", "MaxStorage".
    :type mode: str or ~ai_supercomputer_management_client.models.CheckpointRetentionMode
    :param ttl: Minimum elapsed duration before deleting checkpoint. The value should be in ISO
     8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).
    :type ttl: ~datetime.timedelta
    :param max_storage: Maximum storage size for checkpoint files to retain. Checkpoint files will
     be purged in FIFO manner.
    :type max_storage: int
    """

    _validation = {
        'mode': {'required': True},
    }

    _attribute_map = {
        'mode': {'key': 'mode', 'type': 'str'},
        'ttl': {'key': 'ttl', 'type': 'duration'},
        'max_storage': {'key': 'maxStorage', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        mode: Union[str, "CheckpointRetentionMode"],
        ttl: Optional[datetime.timedelta] = None,
        max_storage: Optional[int] = None,
        **kwargs
    ):
        super(CheckpointRetentionPolicy, self).__init__(**kwargs)
        self.mode = mode
        self.ttl = ttl
        self.max_storage = max_storage


class CompilationPolicy(msrest.serialization.Model):
    """Describes the properties of compilation policy.

    :param input_spec: Input spec (json) to the compiler.
    :type input_spec: str
    :param output_spec: Output spec (json) from the compiler.
    :type output_spec: str
    :param compilation_mode:  Possible values include: "OptmizedStatic", "Static", "Eager".
    :type compilation_mode: str or ~ai_supercomputer_management_client.models.CompilationMode
    :param parallelism_strategy:  Possible values include: "DistributedDataParallel",
     "ModelParallel", "PipelineParallel", "ZeRODistributedDataParallel".
    :type parallelism_strategy: str or
     ~ai_supercomputer_management_client.models.ParallelismStrategy
    """

    _attribute_map = {
        'input_spec': {'key': 'inputSpec', 'type': 'str'},
        'output_spec': {'key': 'outputSpec', 'type': 'str'},
        'compilation_mode': {'key': 'compilationMode', 'type': 'str'},
        'parallelism_strategy': {'key': 'parallelismStrategy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        input_spec: Optional[str] = None,
        output_spec: Optional[str] = None,
        compilation_mode: Optional[Union[str, "CompilationMode"]] = None,
        parallelism_strategy: Optional[Union[str, "ParallelismStrategy"]] = None,
        **kwargs
    ):
        super(CompilationPolicy, self).__init__(**kwargs)
        self.input_spec = input_spec
        self.output_spec = output_spec
        self.compilation_mode = compilation_mode
        self.parallelism_strategy = parallelism_strategy


class CustomImage(msrest.serialization.Model):
    """Describes a custom image for the job resource.

    All required parameters must be populated in order to send to Azure.

    :param container_image_location: Required. Location of container image to use for the training.
    :type container_image_location: str
    :param container_registry_username: Location of container image to use for the training.
    :type container_registry_username: str
    :param container_registry_password: Password of the container registry account.
    :type container_registry_password: str
    """

    _validation = {
        'container_image_location': {'required': True},
    }

    _attribute_map = {
        'container_image_location': {'key': 'containerImageLocation', 'type': 'str'},
        'container_registry_username': {'key': 'containerRegistryUsername', 'type': 'str'},
        'container_registry_password': {'key': 'containerRegistryPassword', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        container_image_location: str,
        container_registry_username: Optional[str] = None,
        container_registry_password: Optional[str] = None,
        **kwargs
    ):
        super(CustomImage, self).__init__(**kwargs)
        self.container_image_location = container_image_location
        self.container_registry_username = container_registry_username
        self.container_registry_password = container_registry_password


class DeploymentPolicy(msrest.serialization.Model):
    """Describes the properties of deployment policy.

    :param auto_deploy: Enables automatic deployment of the model at the end of training for
     inferencing.
    :type auto_deploy: bool
    :param model_version_link: The system generated link to the version resource of the model,
     post-deployment.
    :type model_version_link: str
    :param model_link: The link to the model resource under which the version needs to be deployed.
    :type model_link: str
    """

    _attribute_map = {
        'auto_deploy': {'key': 'autoDeploy', 'type': 'bool'},
        'model_version_link': {'key': 'modelVersionLink', 'type': 'str'},
        'model_link': {'key': 'modelLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        auto_deploy: Optional[bool] = None,
        model_version_link: Optional[str] = None,
        model_link: Optional[str] = None,
        **kwargs
    ):
        super(DeploymentPolicy, self).__init__(**kwargs)
        self.auto_deploy = auto_deploy
        self.model_version_link = model_version_link
        self.model_link = model_link


class ErrorDetailsModel(msrest.serialization.Model):
    """ErrorDetailsModel.

    :param code:
    :type code: str
    :param message:
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ErrorDetailsModel, self).__init__(**kwargs)
        self.code = code
        self.message = message


class ErrorModel(msrest.serialization.Model):
    """ErrorModel.

    :param error:
    :type error: ~ai_supercomputer_management_client.models.ErrorModelProperties
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorModelProperties'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorModelProperties"] = None,
        **kwargs
    ):
        super(ErrorModel, self).__init__(**kwargs)
        self.error = error


class ErrorModelProperties(msrest.serialization.Model):
    """ErrorModelProperties.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param inner_error:
    :type inner_error: str
    :param details:
    :type details: list[~ai_supercomputer_management_client.models.ErrorDetailsModel]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetailsModel]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        inner_error: Optional[str] = None,
        details: Optional[List["ErrorDetailsModel"]] = None,
        **kwargs
    ):
        super(ErrorModelProperties, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.inner_error = inner_error
        self.details = details


class FrameworkImageBase(msrest.serialization.Model):
    """Describes the framework for the job resource.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: PyTorchFrameworkImage, TensorFlowFrameworkImage.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include: "TensorFlow",
     "PyTorch".
    :type kind: str or ~ai_supercomputer_management_client.models.FrameworkKind
    :param custom_image: Describes a custom image for the job resource.
    :type custom_image: ~ai_supercomputer_management_client.models.CustomImage
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'custom_image': {'key': 'customImage', 'type': 'CustomImage'},
    }

    _subtype_map = {
        'kind': {'PyTorch': 'PyTorchFrameworkImage', 'TensorFlow': 'TensorFlowFrameworkImage'}
    }

    def __init__(
        self,
        *,
        custom_image: Optional["CustomImage"] = None,
        **kwargs
    ):
        super(FrameworkImageBase, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.custom_image = custom_image


class GroupPolicyPatchProperties(msrest.serialization.Model):
    """Describes all properties which can be updated for a Singularity group policy resource.

    :param description: User-friendly description of the resource.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    :param max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :type max_shared_storage_io_ps: int
    :param max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :type max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
        'max_shared_storage_io_ps': {'key': 'maxSharedStorageIOPs', 'type': 'int'},
        'max_shared_storage_bandwidth': {'key': 'maxSharedStorageBandwidth', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        super(GroupPolicyPatchProperties, self).__init__(**kwargs)
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyProperties(msrest.serialization.Model):
    """Describes the properties of a GroupPolicy resource.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.PolicyStatus
    :param description: User-friendly description of the resource.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    :param max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :type max_shared_storage_io_ps: int
    :param max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :type max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
        'max_shared_storage_io_ps': {'key': 'maxSharedStorageIOPs', 'type': 'int'},
        'max_shared_storage_bandwidth': {'key': 'maxSharedStorageBandwidth', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional[Union[str, "PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        super(GroupPolicyProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyResourceDescription(Resource):
    """Describes a GroupPolicy resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.PolicyStatus
    :param description: User-friendly description of the resource.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    :param max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :type max_shared_storage_io_ps: int
    :param max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :type max_shared_storage_bandwidth: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'quotas': {'key': 'properties.quotas', 'type': '[InstanceTypeSeriesQuota]'},
        'max_shared_storage_io_ps': {'key': 'properties.maxSharedStorageIOPs', 'type': 'int'},
        'max_shared_storage_bandwidth': {'key': 'properties.maxSharedStorageBandwidth', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional[Union[str, "PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        super(GroupPolicyResourceDescription, self).__init__(system_data=system_data, **kwargs)
        self.provisioning_state = provisioning_state
        self.status = status
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyResourceDescriptionList(msrest.serialization.Model):
    """A pageable list of GroupPolicy resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~ai_supercomputer_management_client.models.GroupPolicyResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[GroupPolicyResourceDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GroupPolicyResourceDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class GroupPolicyResourceDescriptionProperties(GroupPolicyProperties):
    """GroupPolicyResourceDescriptionProperties.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.PolicyStatus
    :param description: User-friendly description of the resource.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    :param max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :type max_shared_storage_io_ps: int
    :param max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :type max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
        'max_shared_storage_io_ps': {'key': 'maxSharedStorageIOPs', 'type': 'int'},
        'max_shared_storage_bandwidth': {'key': 'maxSharedStorageBandwidth', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional[Union[str, "PolicyStatus"]] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        super(GroupPolicyResourceDescriptionProperties, self).__init__(provisioning_state=provisioning_state, status=status, description=description, quotas=quotas, max_shared_storage_io_ps=max_shared_storage_io_ps, max_shared_storage_bandwidth=max_shared_storage_bandwidth, **kwargs)


class GroupPolicyResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity group policy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param description: User-friendly description of the resource.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    :param max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :type max_shared_storage_io_ps: int
    :param max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :type max_shared_storage_bandwidth: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'quotas': {'key': 'properties.quotas', 'type': '[InstanceTypeSeriesQuota]'},
        'max_shared_storage_io_ps': {'key': 'properties.maxSharedStorageIOPs', 'type': 'int'},
        'max_shared_storage_bandwidth': {'key': 'properties.maxSharedStorageBandwidth', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        super(GroupPolicyResourcePatchDescription, self).__init__(system_data=system_data, **kwargs)
        self.description = description
        self.quotas = quotas
        self.max_shared_storage_io_ps = max_shared_storage_io_ps
        self.max_shared_storage_bandwidth = max_shared_storage_bandwidth


class GroupPolicyResourcePatchDescriptionProperties(GroupPolicyPatchProperties):
    """GroupPolicyResourcePatchDescriptionProperties.

    :param description: User-friendly description of the resource.
    :type description: str
    :param quotas: A list of quota policy per instance type series.
    :type quotas: list[~ai_supercomputer_management_client.models.InstanceTypeSeriesQuota]
    :param max_shared_storage_io_ps: Maximum allowed IOPS from shared storageContainer.
    :type max_shared_storage_io_ps: int
    :param max_shared_storage_bandwidth: Maximum allowed bandwidth from shared storageContainer
     expressed in MB/s.
    :type max_shared_storage_bandwidth: int
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'quotas': {'key': 'quotas', 'type': '[InstanceTypeSeriesQuota]'},
        'max_shared_storage_io_ps': {'key': 'maxSharedStorageIOPs', 'type': 'int'},
        'max_shared_storage_bandwidth': {'key': 'maxSharedStorageBandwidth', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        quotas: Optional[List["InstanceTypeSeriesQuota"]] = None,
        max_shared_storage_io_ps: Optional[int] = None,
        max_shared_storage_bandwidth: Optional[int] = None,
        **kwargs
    ):
        super(GroupPolicyResourcePatchDescriptionProperties, self).__init__(description=description, quotas=quotas, max_shared_storage_io_ps=max_shared_storage_io_ps, max_shared_storage_bandwidth=max_shared_storage_bandwidth, **kwargs)


class InstanceTypeSeriesQuota(msrest.serialization.Model):
    """Describes the quota for the InstanceType series.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The identifier for instance type series quota.
    :type id: str
    :ivar name: User friendly description for the instance type series.
    :vartype name: str
    :param limit: Required. Maximum allowed units for the instance type series.
    :type limit: long
    :ivar used: Number of units currently in use.
    :vartype used: long
    """

    _validation = {
        'id': {'required': True},
        'name': {'readonly': True},
        'limit': {'required': True},
        'used': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'limit': {'key': 'limit', 'type': 'long'},
        'used': {'key': 'used', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        id: str,
        limit: int,
        **kwargs
    ):
        super(InstanceTypeSeriesQuota, self).__init__(**kwargs)
        self.id = id
        self.name = None
        self.limit = limit
        self.used = None


class InstanceTypeSettings(msrest.serialization.Model):
    """Describes the instance type settings.

    All required parameters must be populated in order to send to Azure.

    :param instance_type: Required. The instance type belonging to the same series.
    :type instance_type: str
    :param scale_policy: Required. Describes the scale policy for a Job or a Model.
    :type scale_policy: ~ai_supercomputer_management_client.models.ScalePolicy
    """

    _validation = {
        'instance_type': {'required': True},
        'scale_policy': {'required': True},
    }

    _attribute_map = {
        'instance_type': {'key': 'instanceType', 'type': 'str'},
        'scale_policy': {'key': 'scalePolicy', 'type': 'ScalePolicy'},
    }

    def __init__(
        self,
        *,
        instance_type: str,
        scale_policy: "ScalePolicy",
        **kwargs
    ):
        super(InstanceTypeSettings, self).__init__(**kwargs)
        self.instance_type = instance_type
        self.scale_policy = scale_policy


class JobPatchProperties(msrest.serialization.Model):
    """Describes all properties which can be updated for a Singularity job resource.

    :param description: User-friendly description of the job.
    :type description: str
    :param scheduling_priority:  Possible values include: "Low", "Medium", "High".
    :type scheduling_priority: str or ~ai_supercomputer_management_client.models.SchedulingPriority
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'scheduling_priority': {'key': 'schedulingPriority', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        scheduling_priority: Optional[Union[str, "SchedulingPriority"]] = None,
        **kwargs
    ):
        super(JobPatchProperties, self).__init__(**kwargs)
        self.description = description
        self.scheduling_priority = scheduling_priority


class JobResourceDescription(Resource):
    """Describes a job resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param type_identity_type: The type of identity used for the resource. The type 'None' will
     remove any identities from the resource.
    :type type_identity_type: str
    :ivar tenant_id: The tenant id associated with the resource. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar principal_id: The principal id of the resource identity. This property will only be
     provided for a system assigned identity.
    :vartype principal_id: str
    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :ivar job_id: System generated globally unique id for the job. This property is read only.
    :vartype job_id: str
    :param placement_policies: Required. Collection of placement policies to use for the training
     job.
    :type placement_policies: list[~ai_supercomputer_management_client.models.PlacementPolicy]
    :param scheduling_priority:  Possible values include: "Low", "Medium", "High".
    :type scheduling_priority: str or ~ai_supercomputer_management_client.models.SchedulingPriority
    :param data_location: Job input data location.
    :type data_location: list[~ai_supercomputer_management_client.models.StorageLocation]
    :param code_location: This type describes a storage location for jobs and services.
    :type code_location: ~ai_supercomputer_management_client.models.StorageLocation
    :param output_location: This type describes a storage location for jobs and services.
    :type output_location: ~ai_supercomputer_management_client.models.StorageLocation
    :param framework_image: Required. Describes the framework for the job resource.
    :type framework_image: ~ai_supercomputer_management_client.models.FrameworkImageBase
    :param group_policy_name: Group policy name associated with the training job.
    :type group_policy_name: str
    :param checkpoint_policy: Describes the checkpointing policy for job.
    :type checkpoint_policy: ~ai_supercomputer_management_client.models.CheckpointPolicy
    :param compilation_policy: Describes the properties of compilation policy.
    :type compilation_policy: ~ai_supercomputer_management_client.models.CompilationPolicy
    :param deployment_policy: Describes the properties of deployment policy.
    :type deployment_policy: ~ai_supercomputer_management_client.models.DeploymentPolicy
    :param max_job_execution_time: Maximum execution time for a training job in the account (in
     hours).
    :type max_job_execution_time: float
    :param program: The entry script for your Job in the codeLocation. For interactive jobs,
     specify null.
    :type program: str
    :param program_args: Command line arguments to be passed to the program.
    :type program_args: str
    :param tensor_board_log_directory: The directory which TensorBoard will be configured to use as
     the log directory.
    :type tensor_board_log_directory: str
    :param status:  Possible values include: "Creating", "Created", "Approving", "Approved",
     "Starting", "Running", "Suspending", "Suspended", "Resuming", "Deleting", "Error", "Failed",
     "Completed".
    :type status: str or ~ai_supercomputer_management_client.models.JobStatus
    :param description: User-friendly description of the job.
    :type description: str
    :ivar status_details: Gives additional information about the current status of the job.
    :vartype status_details: str
    :ivar notebook_endpoint: Url to access Jupyter notebook endpoint of the job.
    :vartype notebook_endpoint: str
    :ivar tensor_board_endpoint: Url to access TensorBoard endpoint of the job.
    :vartype tensor_board_endpoint: str
    :ivar grafana_endpoint: Url to access Grafana endpoint of the job.
    :vartype grafana_endpoint: str
    :ivar job_logs_endpoint: Url to access logs of the job.
    :vartype job_logs_endpoint: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tenant_id': {'readonly': True},
        'principal_id': {'readonly': True},
        'job_id': {'readonly': True},
        'placement_policies': {'required': True},
        'framework_image': {'required': True},
        'status_details': {'readonly': True},
        'notebook_endpoint': {'readonly': True},
        'tensor_board_endpoint': {'readonly': True},
        'grafana_endpoint': {'readonly': True},
        'job_logs_endpoint': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'type_identity_type': {'key': 'identity.type', 'type': 'str'},
        'tenant_id': {'key': 'identity.tenantId', 'type': 'str'},
        'principal_id': {'key': 'identity.principalId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'job_id': {'key': 'properties.jobId', 'type': 'str'},
        'placement_policies': {'key': 'properties.placementPolicies', 'type': '[PlacementPolicy]'},
        'scheduling_priority': {'key': 'properties.schedulingPriority', 'type': 'str'},
        'data_location': {'key': 'properties.dataLocation', 'type': '[StorageLocation]'},
        'code_location': {'key': 'properties.codeLocation', 'type': 'StorageLocation'},
        'output_location': {'key': 'properties.outputLocation', 'type': 'StorageLocation'},
        'framework_image': {'key': 'properties.frameworkImage', 'type': 'FrameworkImageBase'},
        'group_policy_name': {'key': 'properties.groupPolicyName', 'type': 'str'},
        'checkpoint_policy': {'key': 'properties.checkpointPolicy', 'type': 'CheckpointPolicy'},
        'compilation_policy': {'key': 'properties.compilationPolicy', 'type': 'CompilationPolicy'},
        'deployment_policy': {'key': 'properties.deploymentPolicy', 'type': 'DeploymentPolicy'},
        'max_job_execution_time': {'key': 'properties.maxJobExecutionTime', 'type': 'float'},
        'program': {'key': 'properties.program', 'type': 'str'},
        'program_args': {'key': 'properties.programArgs', 'type': 'str'},
        'tensor_board_log_directory': {'key': 'properties.tensorBoardLogDirectory', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'notebook_endpoint': {'key': 'properties.notebookEndpoint', 'type': 'str'},
        'tensor_board_endpoint': {'key': 'properties.tensorBoardEndpoint', 'type': 'str'},
        'grafana_endpoint': {'key': 'properties.grafanaEndpoint', 'type': 'str'},
        'job_logs_endpoint': {'key': 'properties.jobLogsEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        placement_policies: List["PlacementPolicy"],
        framework_image: "FrameworkImageBase",
        system_data: Optional["ResourceSystemData"] = None,
        type_identity_type: Optional[str] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        scheduling_priority: Optional[Union[str, "SchedulingPriority"]] = None,
        data_location: Optional[List["StorageLocation"]] = None,
        code_location: Optional["StorageLocation"] = None,
        output_location: Optional["StorageLocation"] = None,
        group_policy_name: Optional[str] = None,
        checkpoint_policy: Optional["CheckpointPolicy"] = None,
        compilation_policy: Optional["CompilationPolicy"] = None,
        deployment_policy: Optional["DeploymentPolicy"] = None,
        max_job_execution_time: Optional[float] = None,
        program: Optional[str] = None,
        program_args: Optional[str] = None,
        tensor_board_log_directory: Optional[str] = None,
        status: Optional[Union[str, "JobStatus"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(JobResourceDescription, self).__init__(system_data=system_data, **kwargs)
        self.type_identity_type = type_identity_type
        self.tenant_id = None
        self.principal_id = None
        self.provisioning_state = provisioning_state
        self.job_id = None
        self.placement_policies = placement_policies
        self.scheduling_priority = scheduling_priority
        self.data_location = data_location
        self.code_location = code_location
        self.output_location = output_location
        self.framework_image = framework_image
        self.group_policy_name = group_policy_name
        self.checkpoint_policy = checkpoint_policy
        self.compilation_policy = compilation_policy
        self.deployment_policy = deployment_policy
        self.max_job_execution_time = max_job_execution_time
        self.program = program
        self.program_args = program_args
        self.tensor_board_log_directory = tensor_board_log_directory
        self.status = status
        self.description = description
        self.status_details = None
        self.notebook_endpoint = None
        self.tensor_board_endpoint = None
        self.grafana_endpoint = None
        self.job_logs_endpoint = None


class JobResourceDescriptionList(msrest.serialization.Model):
    """A pageable list of Job resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value: list[~ai_supercomputer_management_client.models.JobResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[JobResourceDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobResourceDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class JobResourceProperties(msrest.serialization.Model):
    """Describes the properties of a job resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :ivar job_id: System generated globally unique id for the job. This property is read only.
    :vartype job_id: str
    :param placement_policies: Required. Collection of placement policies to use for the training
     job.
    :type placement_policies: list[~ai_supercomputer_management_client.models.PlacementPolicy]
    :param scheduling_priority:  Possible values include: "Low", "Medium", "High".
    :type scheduling_priority: str or ~ai_supercomputer_management_client.models.SchedulingPriority
    :param data_location: Job input data location.
    :type data_location: list[~ai_supercomputer_management_client.models.StorageLocation]
    :param code_location: This type describes a storage location for jobs and services.
    :type code_location: ~ai_supercomputer_management_client.models.StorageLocation
    :param output_location: This type describes a storage location for jobs and services.
    :type output_location: ~ai_supercomputer_management_client.models.StorageLocation
    :param framework_image: Required. Describes the framework for the job resource.
    :type framework_image: ~ai_supercomputer_management_client.models.FrameworkImageBase
    :param group_policy_name: Group policy name associated with the training job.
    :type group_policy_name: str
    :param checkpoint_policy: Describes the checkpointing policy for job.
    :type checkpoint_policy: ~ai_supercomputer_management_client.models.CheckpointPolicy
    :param compilation_policy: Describes the properties of compilation policy.
    :type compilation_policy: ~ai_supercomputer_management_client.models.CompilationPolicy
    :param deployment_policy: Describes the properties of deployment policy.
    :type deployment_policy: ~ai_supercomputer_management_client.models.DeploymentPolicy
    :param max_job_execution_time: Maximum execution time for a training job in the account (in
     hours).
    :type max_job_execution_time: float
    :param program: The entry script for your Job in the codeLocation. For interactive jobs,
     specify null.
    :type program: str
    :param program_args: Command line arguments to be passed to the program.
    :type program_args: str
    :param tensor_board_log_directory: The directory which TensorBoard will be configured to use as
     the log directory.
    :type tensor_board_log_directory: str
    :param status:  Possible values include: "Creating", "Created", "Approving", "Approved",
     "Starting", "Running", "Suspending", "Suspended", "Resuming", "Deleting", "Error", "Failed",
     "Completed".
    :type status: str or ~ai_supercomputer_management_client.models.JobStatus
    :param description: User-friendly description of the job.
    :type description: str
    :ivar status_details: Gives additional information about the current status of the job.
    :vartype status_details: str
    :ivar notebook_endpoint: Url to access Jupyter notebook endpoint of the job.
    :vartype notebook_endpoint: str
    :ivar tensor_board_endpoint: Url to access TensorBoard endpoint of the job.
    :vartype tensor_board_endpoint: str
    :ivar grafana_endpoint: Url to access Grafana endpoint of the job.
    :vartype grafana_endpoint: str
    :ivar job_logs_endpoint: Url to access logs of the job.
    :vartype job_logs_endpoint: str
    """

    _validation = {
        'job_id': {'readonly': True},
        'placement_policies': {'required': True},
        'framework_image': {'required': True},
        'status_details': {'readonly': True},
        'notebook_endpoint': {'readonly': True},
        'tensor_board_endpoint': {'readonly': True},
        'grafana_endpoint': {'readonly': True},
        'job_logs_endpoint': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'placement_policies': {'key': 'placementPolicies', 'type': '[PlacementPolicy]'},
        'scheduling_priority': {'key': 'schedulingPriority', 'type': 'str'},
        'data_location': {'key': 'dataLocation', 'type': '[StorageLocation]'},
        'code_location': {'key': 'codeLocation', 'type': 'StorageLocation'},
        'output_location': {'key': 'outputLocation', 'type': 'StorageLocation'},
        'framework_image': {'key': 'frameworkImage', 'type': 'FrameworkImageBase'},
        'group_policy_name': {'key': 'groupPolicyName', 'type': 'str'},
        'checkpoint_policy': {'key': 'checkpointPolicy', 'type': 'CheckpointPolicy'},
        'compilation_policy': {'key': 'compilationPolicy', 'type': 'CompilationPolicy'},
        'deployment_policy': {'key': 'deploymentPolicy', 'type': 'DeploymentPolicy'},
        'max_job_execution_time': {'key': 'maxJobExecutionTime', 'type': 'float'},
        'program': {'key': 'program', 'type': 'str'},
        'program_args': {'key': 'programArgs', 'type': 'str'},
        'tensor_board_log_directory': {'key': 'tensorBoardLogDirectory', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'notebook_endpoint': {'key': 'notebookEndpoint', 'type': 'str'},
        'tensor_board_endpoint': {'key': 'tensorBoardEndpoint', 'type': 'str'},
        'grafana_endpoint': {'key': 'grafanaEndpoint', 'type': 'str'},
        'job_logs_endpoint': {'key': 'jobLogsEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        placement_policies: List["PlacementPolicy"],
        framework_image: "FrameworkImageBase",
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        scheduling_priority: Optional[Union[str, "SchedulingPriority"]] = None,
        data_location: Optional[List["StorageLocation"]] = None,
        code_location: Optional["StorageLocation"] = None,
        output_location: Optional["StorageLocation"] = None,
        group_policy_name: Optional[str] = None,
        checkpoint_policy: Optional["CheckpointPolicy"] = None,
        compilation_policy: Optional["CompilationPolicy"] = None,
        deployment_policy: Optional["DeploymentPolicy"] = None,
        max_job_execution_time: Optional[float] = None,
        program: Optional[str] = None,
        program_args: Optional[str] = None,
        tensor_board_log_directory: Optional[str] = None,
        status: Optional[Union[str, "JobStatus"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(JobResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.job_id = None
        self.placement_policies = placement_policies
        self.scheduling_priority = scheduling_priority
        self.data_location = data_location
        self.code_location = code_location
        self.output_location = output_location
        self.framework_image = framework_image
        self.group_policy_name = group_policy_name
        self.checkpoint_policy = checkpoint_policy
        self.compilation_policy = compilation_policy
        self.deployment_policy = deployment_policy
        self.max_job_execution_time = max_job_execution_time
        self.program = program
        self.program_args = program_args
        self.tensor_board_log_directory = tensor_board_log_directory
        self.status = status
        self.description = description
        self.status_details = None
        self.notebook_endpoint = None
        self.tensor_board_endpoint = None
        self.grafana_endpoint = None
        self.job_logs_endpoint = None


class JobResourceDescriptionProperties(JobResourceProperties):
    """JobResourceDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :ivar job_id: System generated globally unique id for the job. This property is read only.
    :vartype job_id: str
    :param placement_policies: Required. Collection of placement policies to use for the training
     job.
    :type placement_policies: list[~ai_supercomputer_management_client.models.PlacementPolicy]
    :param scheduling_priority:  Possible values include: "Low", "Medium", "High".
    :type scheduling_priority: str or ~ai_supercomputer_management_client.models.SchedulingPriority
    :param data_location: Job input data location.
    :type data_location: list[~ai_supercomputer_management_client.models.StorageLocation]
    :param code_location: This type describes a storage location for jobs and services.
    :type code_location: ~ai_supercomputer_management_client.models.StorageLocation
    :param output_location: This type describes a storage location for jobs and services.
    :type output_location: ~ai_supercomputer_management_client.models.StorageLocation
    :param framework_image: Required. Describes the framework for the job resource.
    :type framework_image: ~ai_supercomputer_management_client.models.FrameworkImageBase
    :param group_policy_name: Group policy name associated with the training job.
    :type group_policy_name: str
    :param checkpoint_policy: Describes the checkpointing policy for job.
    :type checkpoint_policy: ~ai_supercomputer_management_client.models.CheckpointPolicy
    :param compilation_policy: Describes the properties of compilation policy.
    :type compilation_policy: ~ai_supercomputer_management_client.models.CompilationPolicy
    :param deployment_policy: Describes the properties of deployment policy.
    :type deployment_policy: ~ai_supercomputer_management_client.models.DeploymentPolicy
    :param max_job_execution_time: Maximum execution time for a training job in the account (in
     hours).
    :type max_job_execution_time: float
    :param program: The entry script for your Job in the codeLocation. For interactive jobs,
     specify null.
    :type program: str
    :param program_args: Command line arguments to be passed to the program.
    :type program_args: str
    :param tensor_board_log_directory: The directory which TensorBoard will be configured to use as
     the log directory.
    :type tensor_board_log_directory: str
    :param status:  Possible values include: "Creating", "Created", "Approving", "Approved",
     "Starting", "Running", "Suspending", "Suspended", "Resuming", "Deleting", "Error", "Failed",
     "Completed".
    :type status: str or ~ai_supercomputer_management_client.models.JobStatus
    :param description: User-friendly description of the job.
    :type description: str
    :ivar status_details: Gives additional information about the current status of the job.
    :vartype status_details: str
    :ivar notebook_endpoint: Url to access Jupyter notebook endpoint of the job.
    :vartype notebook_endpoint: str
    :ivar tensor_board_endpoint: Url to access TensorBoard endpoint of the job.
    :vartype tensor_board_endpoint: str
    :ivar grafana_endpoint: Url to access Grafana endpoint of the job.
    :vartype grafana_endpoint: str
    :ivar job_logs_endpoint: Url to access logs of the job.
    :vartype job_logs_endpoint: str
    """

    _validation = {
        'job_id': {'readonly': True},
        'placement_policies': {'required': True},
        'framework_image': {'required': True},
        'status_details': {'readonly': True},
        'notebook_endpoint': {'readonly': True},
        'tensor_board_endpoint': {'readonly': True},
        'grafana_endpoint': {'readonly': True},
        'job_logs_endpoint': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'placement_policies': {'key': 'placementPolicies', 'type': '[PlacementPolicy]'},
        'scheduling_priority': {'key': 'schedulingPriority', 'type': 'str'},
        'data_location': {'key': 'dataLocation', 'type': '[StorageLocation]'},
        'code_location': {'key': 'codeLocation', 'type': 'StorageLocation'},
        'output_location': {'key': 'outputLocation', 'type': 'StorageLocation'},
        'framework_image': {'key': 'frameworkImage', 'type': 'FrameworkImageBase'},
        'group_policy_name': {'key': 'groupPolicyName', 'type': 'str'},
        'checkpoint_policy': {'key': 'checkpointPolicy', 'type': 'CheckpointPolicy'},
        'compilation_policy': {'key': 'compilationPolicy', 'type': 'CompilationPolicy'},
        'deployment_policy': {'key': 'deploymentPolicy', 'type': 'DeploymentPolicy'},
        'max_job_execution_time': {'key': 'maxJobExecutionTime', 'type': 'float'},
        'program': {'key': 'program', 'type': 'str'},
        'program_args': {'key': 'programArgs', 'type': 'str'},
        'tensor_board_log_directory': {'key': 'tensorBoardLogDirectory', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'notebook_endpoint': {'key': 'notebookEndpoint', 'type': 'str'},
        'tensor_board_endpoint': {'key': 'tensorBoardEndpoint', 'type': 'str'},
        'grafana_endpoint': {'key': 'grafanaEndpoint', 'type': 'str'},
        'job_logs_endpoint': {'key': 'jobLogsEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        placement_policies: List["PlacementPolicy"],
        framework_image: "FrameworkImageBase",
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        scheduling_priority: Optional[Union[str, "SchedulingPriority"]] = None,
        data_location: Optional[List["StorageLocation"]] = None,
        code_location: Optional["StorageLocation"] = None,
        output_location: Optional["StorageLocation"] = None,
        group_policy_name: Optional[str] = None,
        checkpoint_policy: Optional["CheckpointPolicy"] = None,
        compilation_policy: Optional["CompilationPolicy"] = None,
        deployment_policy: Optional["DeploymentPolicy"] = None,
        max_job_execution_time: Optional[float] = None,
        program: Optional[str] = None,
        program_args: Optional[str] = None,
        tensor_board_log_directory: Optional[str] = None,
        status: Optional[Union[str, "JobStatus"]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(JobResourceDescriptionProperties, self).__init__(provisioning_state=provisioning_state, placement_policies=placement_policies, scheduling_priority=scheduling_priority, data_location=data_location, code_location=code_location, output_location=output_location, framework_image=framework_image, group_policy_name=group_policy_name, checkpoint_policy=checkpoint_policy, compilation_policy=compilation_policy, deployment_policy=deployment_policy, max_job_execution_time=max_job_execution_time, program=program, program_args=program_args, tensor_board_log_directory=tensor_board_log_directory, status=status, description=description, **kwargs)


class JobResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity job resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param description: User-friendly description of the job.
    :type description: str
    :param scheduling_priority:  Possible values include: "Low", "Medium", "High".
    :type scheduling_priority: str or ~ai_supercomputer_management_client.models.SchedulingPriority
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'scheduling_priority': {'key': 'properties.schedulingPriority', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        description: Optional[str] = None,
        scheduling_priority: Optional[Union[str, "SchedulingPriority"]] = None,
        **kwargs
    ):
        super(JobResourcePatchDescription, self).__init__(system_data=system_data, **kwargs)
        self.description = description
        self.scheduling_priority = scheduling_priority


class JobResourcePatchDescriptionProperties(JobPatchProperties):
    """JobResourcePatchDescriptionProperties.

    :param description: User-friendly description of the job.
    :type description: str
    :param scheduling_priority:  Possible values include: "Low", "Medium", "High".
    :type scheduling_priority: str or ~ai_supercomputer_management_client.models.SchedulingPriority
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'scheduling_priority': {'key': 'schedulingPriority', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        scheduling_priority: Optional[Union[str, "SchedulingPriority"]] = None,
        **kwargs
    ):
        super(JobResourcePatchDescriptionProperties, self).__init__(description=description, scheduling_priority=scheduling_priority, **kwargs)


class JobSasTokenDescription(msrest.serialization.Model):
    """Describes a Shared Access Signature (SAS) Token for Singularity Jobs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param start_time: The SAS token is valid only after the start time (UTC).
    :type start_time: ~datetime.datetime
    :param expiration_time: The time (UTC) after which the SAS token becomes invalid.
    :type expiration_time: ~datetime.datetime
    :param protocol:  Possible values include: "Https", "Tcp", "WebSocket", "Ssh".
    :type protocol: str or ~ai_supercomputer_management_client.models.ProtocolType
    :ivar version: The algorithm and API version the SAS token was generated with.
    :vartype version: str
    :ivar token: The SAS token generated by the service.
    :vartype token: str
    :param group_policy_name: The name of the group policy.
    :type group_policy_name: str
    """

    _validation = {
        'version': {'readonly': True},
        'token': {'readonly': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'expiration_time': {'key': 'expirationTime', 'type': 'iso-8601'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
        'group_policy_name': {'key': 'groupPolicyName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_time: Optional[datetime.datetime] = None,
        expiration_time: Optional[datetime.datetime] = None,
        protocol: Optional[Union[str, "ProtocolType"]] = None,
        group_policy_name: Optional[str] = None,
        **kwargs
    ):
        super(JobSasTokenDescription, self).__init__(**kwargs)
        self.start_time = start_time
        self.expiration_time = expiration_time
        self.protocol = protocol
        self.version = None
        self.token = None
        self.group_policy_name = group_policy_name


class JobUserActionDescription(msrest.serialization.Model):
    """Describes properties for the user action of Singularity jobs.

    :param group_policy_name: The name of the group policy.
    :type group_policy_name: str
    """

    _attribute_map = {
        'group_policy_name': {'key': 'groupPolicyName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        group_policy_name: Optional[str] = None,
        **kwargs
    ):
        super(JobUserActionDescription, self).__init__(**kwargs)
        self.group_policy_name = group_policy_name


class PlacementPolicy(msrest.serialization.Model):
    """Describes the placement policy for a Job or a Model.

    All required parameters must be populated in order to send to Azure.

    :param instance_types: Required. The list of settings for instance types.
    :type instance_types: list[~ai_supercomputer_management_client.models.InstanceTypeSettings]
    :param location: An optional location for instance type placement. If specified, this must be
     one of the account resource locations.
    :type location: str
    """

    _validation = {
        'instance_types': {'required': True},
    }

    _attribute_map = {
        'instance_types': {'key': 'instanceTypes', 'type': '[InstanceTypeSettings]'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        instance_types: List["InstanceTypeSettings"],
        location: Optional[str] = None,
        **kwargs
    ):
        super(PlacementPolicy, self).__init__(**kwargs)
        self.instance_types = instance_types
        self.location = location


class PyTorchFrameworkImage(FrameworkImageBase):
    """Describes a platform PyTorch image for the job resource.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include: "TensorFlow",
     "PyTorch".
    :type kind: str or ~ai_supercomputer_management_client.models.FrameworkKind
    :param custom_image: Describes a custom image for the job resource.
    :type custom_image: ~ai_supercomputer_management_client.models.CustomImage
    :param version: Version of the PyTorch image.
    :type version: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'custom_image': {'key': 'customImage', 'type': 'CustomImage'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        custom_image: Optional["CustomImage"] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(PyTorchFrameworkImage, self).__init__(custom_image=custom_image, **kwargs)
        self.kind = 'PyTorch'  # type: str
        self.version = version


class ResourceSystemData(msrest.serialization.Model):
    """ResourceSystemData.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_by: A string identifier for the identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource: user, application,
     managedIdentity, key.
    :vartype created_by_type: str
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: str
    :ivar last_modified_by: A string identifier for the identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource: user,
     application, managedIdentity, key.
    :vartype last_modified_by_type: str
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: str
    """

    _validation = {
        'created_by': {'readonly': True},
        'created_by_type': {'readonly': True},
        'created_at': {'readonly': True},
        'last_modified_by': {'readonly': True},
        'last_modified_by_type': {'readonly': True},
        'last_modified_at': {'readonly': True},
    }

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceSystemData, self).__init__(**kwargs)
        self.created_by = None
        self.created_by_type = None
        self.created_at = None
        self.last_modified_by = None
        self.last_modified_by_type = None
        self.last_modified_at = None


class ScalePolicy(msrest.serialization.Model):
    """Describes the scale policy for a Job or a Model.

    All required parameters must be populated in order to send to Azure.

    :param auto_scale: Indicates if auto scale is enabled.
    :type auto_scale: bool
    :param min_instance_type_count: The minimum instance type count to provision.
    :type min_instance_type_count: int
    :param max_instance_type_count: Maximum instance type count (the limit) up to which to
     provision.
    :type max_instance_type_count: int
    :param current_instance_type_count: Required. The current instance type count.
    :type current_instance_type_count: int
    :param auto_scale_instance_type_count_set: An optional set of valid instance type counts that
     the job can be autoscaled to e.g., [2,4,8,16]. Min/Max values in the set must be equal to
     MinInstanceTypeCount/MaxInstanceTypeCount, respectively.
    :type auto_scale_instance_type_count_set: list[int]
    :param auto_scale_interval_in_sec: The minimum auto scale-up interval in seconds.
    :type auto_scale_interval_in_sec: int
    """

    _validation = {
        'current_instance_type_count': {'required': True, 'maximum': 2147483647, 'minimum': 1},
    }

    _attribute_map = {
        'auto_scale': {'key': 'autoScale', 'type': 'bool'},
        'min_instance_type_count': {'key': 'minInstanceTypeCount', 'type': 'int'},
        'max_instance_type_count': {'key': 'maxInstanceTypeCount', 'type': 'int'},
        'current_instance_type_count': {'key': 'currentInstanceTypeCount', 'type': 'int'},
        'auto_scale_instance_type_count_set': {'key': 'autoScaleInstanceTypeCountSet', 'type': '[int]'},
        'auto_scale_interval_in_sec': {'key': 'autoScaleIntervalInSec', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        current_instance_type_count: int,
        auto_scale: Optional[bool] = None,
        min_instance_type_count: Optional[int] = None,
        max_instance_type_count: Optional[int] = None,
        auto_scale_instance_type_count_set: Optional[List[int]] = None,
        auto_scale_interval_in_sec: Optional[int] = None,
        **kwargs
    ):
        super(ScalePolicy, self).__init__(**kwargs)
        self.auto_scale = auto_scale
        self.min_instance_type_count = min_instance_type_count
        self.max_instance_type_count = max_instance_type_count
        self.current_instance_type_count = current_instance_type_count
        self.auto_scale_instance_type_count_set = auto_scale_instance_type_count_set
        self.auto_scale_interval_in_sec = auto_scale_interval_in_sec


class StorageContainerProperties(msrest.serialization.Model):
    """Describes the properties of a storage container resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of the storage container.
    :type description: str
    :param tier: Required.  Possible values include: "Cold", "Warm", "Hot".
    :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
    :ivar consumed_storage_in_gb: The storage in GB consumed by the storage container.
    :vartype consumed_storage_in_gb: int
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
    :ivar status_details: Gives additional information about the current status of the storage
     container.
    :vartype status_details: str
    :ivar size_in_gb: Size of the managed storage in GB.
    :vartype size_in_gb: int
    :param location: Required. Location for managed storag.
    :type location: str
    """

    _validation = {
        'tier': {'required': True},
        'consumed_storage_in_gb': {'readonly': True},
        'status_details': {'readonly': True},
        'size_in_gb': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'consumed_storage_in_gb': {'key': 'consumedStorageInGB', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'size_in_gb': {'key': 'sizeInGB', 'type': 'int'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tier: Union[str, "StorageContainerTier"],
        location: str,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "StorageContainerStatus"]] = None,
        **kwargs
    ):
        super(StorageContainerProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.tier = tier
        self.consumed_storage_in_gb = None
        self.status = status
        self.status_details = None
        self.size_in_gb = None
        self.location = location


class StorageContainerResourceDescription(Resource):
    """Describes a storage container resource in Singularity.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of the storage container.
    :type description: str
    :param tier:  Possible values include: "Cold", "Warm", "Hot".
    :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
    :ivar consumed_storage_in_gb: The storage in GB consumed by the storage container.
    :vartype consumed_storage_in_gb: int
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
    :ivar status_details: Gives additional information about the current status of the storage
     container.
    :vartype status_details: str
    :ivar size_in_gb: Size of the managed storage in GB.
    :vartype size_in_gb: int
    :param location: Location for managed storag.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'consumed_storage_in_gb': {'readonly': True},
        'status_details': {'readonly': True},
        'size_in_gb': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'tier': {'key': 'properties.tier', 'type': 'str'},
        'consumed_storage_in_gb': {'key': 'properties.consumedStorageInGB', 'type': 'int'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'size_in_gb': {'key': 'properties.sizeInGB', 'type': 'int'},
        'location': {'key': 'properties.location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        system_data: Optional["ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        tier: Optional[Union[str, "StorageContainerTier"]] = None,
        status: Optional[Union[str, "StorageContainerStatus"]] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(StorageContainerResourceDescription, self).__init__(system_data=system_data, **kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.tier = tier
        self.consumed_storage_in_gb = None
        self.status = status
        self.status_details = None
        self.size_in_gb = None
        self.location = location


class StorageContainerResourceDescriptionList(msrest.serialization.Model):
    """A pageable list of storage container resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: One page of the list.
    :vartype value:
     list[~ai_supercomputer_management_client.models.StorageContainerResourceDescription]
    :ivar next_link: URI to fetch the next page of the list.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[StorageContainerResourceDescription]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StorageContainerResourceDescriptionList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class StorageContainerResourceDescriptionProperties(StorageContainerProperties):
    """StorageContainerResourceDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of the storage container.
    :type description: str
    :param tier: Required.  Possible values include: "Cold", "Warm", "Hot".
    :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
    :ivar consumed_storage_in_gb: The storage in GB consumed by the storage container.
    :vartype consumed_storage_in_gb: int
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
    :ivar status_details: Gives additional information about the current status of the storage
     container.
    :vartype status_details: str
    :ivar size_in_gb: Size of the managed storage in GB.
    :vartype size_in_gb: int
    :param location: Required. Location for managed storag.
    :type location: str
    """

    _validation = {
        'tier': {'required': True},
        'consumed_storage_in_gb': {'readonly': True},
        'status_details': {'readonly': True},
        'size_in_gb': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'consumed_storage_in_gb': {'key': 'consumedStorageInGB', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'size_in_gb': {'key': 'sizeInGB', 'type': 'int'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tier: Union[str, "StorageContainerTier"],
        location: str,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "StorageContainerStatus"]] = None,
        **kwargs
    ):
        super(StorageContainerResourceDescriptionProperties, self).__init__(provisioning_state=provisioning_state, description=description, tier=tier, status=status, location=location, **kwargs)


class StorageContainerResourcePatchDescription(Resource):
    """Describes all properties which can be updated for a Singularity storage container resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. For example,
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. For example, 'Microsoft.Compute/virtualMachines' or
     'Microsoft.Storage/storageAccounts'.
    :vartype type: str
    :param system_data:
    :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of the storage container.
    :type description: str
    :param tier: Required.  Possible values include: "Cold", "Warm", "Hot".
    :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
    :ivar consumed_storage_in_gb: The storage in GB consumed by the storage container.
    :vartype consumed_storage_in_gb: int
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
    :ivar status_details: Gives additional information about the current status of the storage
     container.
    :vartype status_details: str
    :ivar size_in_gb: Size of the managed storage in GB.
    :vartype size_in_gb: int
    :param location: Required. Location for managed storag.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tier': {'required': True},
        'consumed_storage_in_gb': {'readonly': True},
        'status_details': {'readonly': True},
        'size_in_gb': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'ResourceSystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'tier': {'key': 'properties.tier', 'type': 'str'},
        'consumed_storage_in_gb': {'key': 'properties.consumedStorageInGB', 'type': 'int'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'size_in_gb': {'key': 'properties.sizeInGB', 'type': 'int'},
        'location': {'key': 'properties.location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tier: Union[str, "StorageContainerTier"],
        location: str,
        system_data: Optional["ResourceSystemData"] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "StorageContainerStatus"]] = None,
        **kwargs
    ):
        super(StorageContainerResourcePatchDescription, self).__init__(system_data=system_data, **kwargs)
        self.provisioning_state = provisioning_state
        self.description = description
        self.tier = tier
        self.consumed_storage_in_gb = None
        self.status = status
        self.status_details = None
        self.size_in_gb = None
        self.location = location


class StorageContainerResourcePatchDescriptionProperties(StorageContainerProperties):
    """StorageContainerResourcePatchDescriptionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "Succeeded", "Failed", "Canceled",
     "Creating", "Updating", "Deleting".
    :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
    :param description: User-friendly description of the storage container.
    :type description: str
    :param tier: Required.  Possible values include: "Cold", "Warm", "Hot".
    :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
    :ivar consumed_storage_in_gb: The storage in GB consumed by the storage container.
    :vartype consumed_storage_in_gb: int
    :param status:  Possible values include: "Creating", "Created", "Updating", "Deleting",
     "Failed".
    :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
    :ivar status_details: Gives additional information about the current status of the storage
     container.
    :vartype status_details: str
    :ivar size_in_gb: Size of the managed storage in GB.
    :vartype size_in_gb: int
    :param location: Required. Location for managed storag.
    :type location: str
    """

    _validation = {
        'tier': {'required': True},
        'consumed_storage_in_gb': {'readonly': True},
        'status_details': {'readonly': True},
        'size_in_gb': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'consumed_storage_in_gb': {'key': 'consumedStorageInGB', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'size_in_gb': {'key': 'sizeInGB', 'type': 'int'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tier: Union[str, "StorageContainerTier"],
        location: str,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        description: Optional[str] = None,
        status: Optional[Union[str, "StorageContainerStatus"]] = None,
        **kwargs
    ):
        super(StorageContainerResourcePatchDescriptionProperties, self).__init__(provisioning_state=provisioning_state, description=description, tier=tier, status=status, location=location, **kwargs)


class StorageLocation(msrest.serialization.Model):
    """This type describes a storage location for jobs and services.

    All required parameters must be populated in order to send to Azure.

    :param source: Required. This type describes Singularity storage for a job or service.
    :type source: ~ai_supercomputer_management_client.models.StorageSourceBase
    :param mount: Required. This type describes the mounting properties for a storage source.
    :type mount: ~ai_supercomputer_management_client.models.StorageMount
    """

    _validation = {
        'source': {'required': True},
        'mount': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'StorageSourceBase'},
        'mount': {'key': 'mount', 'type': 'StorageMount'},
    }

    def __init__(
        self,
        *,
        source: "StorageSourceBase",
        mount: "StorageMount",
        **kwargs
    ):
        super(StorageLocation, self).__init__(**kwargs)
        self.source = source
        self.mount = mount


class StorageMount(msrest.serialization.Model):
    """This type describes the mounting properties for a storage source.

    All required parameters must be populated in order to send to Azure.

    :param path: Required. The local mount path for the storage source.
    :type path: str
    """

    _validation = {
        'path': {'required': True},
    }

    _attribute_map = {
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        path: str,
        **kwargs
    ):
        super(StorageMount, self).__init__(**kwargs)
        self.path = path


class StorageSourceBase(msrest.serialization.Model):
    """This type describes Singularity storage for a job or service.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: StorageSourceAzureAiSupercomputerStorage, StorageSourceAzureBlob, StorageSourceAzureFile.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include:
     "AzureAISupercomputerStorage", "AzureBlobStorage", "AzureFileStorage".
    :type kind: str or ~ai_supercomputer_management_client.models.StorageSourceKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AzureAISupercomputerStorage': 'StorageSourceAzureAiSupercomputerStorage', 'AzureBlobStorage': 'StorageSourceAzureBlob', 'AzureFileStorage': 'StorageSourceAzureFile'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StorageSourceBase, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class StorageSourceAzureAiSupercomputerStorage(StorageSourceBase):
    """This type describes Singularity storage for a job or service.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include:
     "AzureAISupercomputerStorage", "AzureBlobStorage", "AzureFileStorage".
    :type kind: str or ~ai_supercomputer_management_client.models.StorageSourceKind
    :param storage_container_name: Required. Path to the Singularity storage.
    :type storage_container_name: str
    """

    _validation = {
        'kind': {'required': True},
        'storage_container_name': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'storage_container_name': {'key': 'storageContainerName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        storage_container_name: str,
        **kwargs
    ):
        super(StorageSourceAzureAiSupercomputerStorage, self).__init__(**kwargs)
        self.kind = 'AzureAISupercomputerStorage'  # type: str
        self.storage_container_name = storage_container_name


class StorageSourceAzureBlob(StorageSourceBase):
    """This type describes Singularity storage for a job or service.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include:
     "AzureAISupercomputerStorage", "AzureBlobStorage", "AzureFileStorage".
    :type kind: str or ~ai_supercomputer_management_client.models.StorageSourceKind
    :param blob_endpoint: Required. Fully qualified url for the specified blob with the associated
     SAS token.
    :type blob_endpoint: str
    """

    _validation = {
        'kind': {'required': True},
        'blob_endpoint': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'blob_endpoint': {'key': 'blobEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        blob_endpoint: str,
        **kwargs
    ):
        super(StorageSourceAzureBlob, self).__init__(**kwargs)
        self.kind = 'AzureBlobStorage'  # type: str
        self.blob_endpoint = blob_endpoint


class StorageSourceAzureFile(StorageSourceBase):
    """This type describes Singularity storage for a job or service.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include:
     "AzureAISupercomputerStorage", "AzureBlobStorage", "AzureFileStorage".
    :type kind: str or ~ai_supercomputer_management_client.models.StorageSourceKind
    :param file_endpoint: Required. Fully qualified endpoint with the file share name.
    :type file_endpoint: str
    :param storage_account: Required. Storage account name for the Azure file share.
    :type storage_account: str
    :param account_key: Required. Storage account key for the Azure file share.
    :type account_key: str
    """

    _validation = {
        'kind': {'required': True},
        'file_endpoint': {'required': True},
        'storage_account': {'required': True},
        'account_key': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'file_endpoint': {'key': 'fileEndpoint', 'type': 'str'},
        'storage_account': {'key': 'storageAccount', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file_endpoint: str,
        storage_account: str,
        account_key: str,
        **kwargs
    ):
        super(StorageSourceAzureFile, self).__init__(**kwargs)
        self.kind = 'AzureFileStorage'  # type: str
        self.file_endpoint = file_endpoint
        self.storage_account = storage_account
        self.account_key = account_key


class TensorFlowFrameworkImage(FrameworkImageBase):
    """Describes a platform TensorFlow image for the job resource.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.  Possible values include: "TensorFlow",
     "PyTorch".
    :type kind: str or ~ai_supercomputer_management_client.models.FrameworkKind
    :param custom_image: Describes a custom image for the job resource.
    :type custom_image: ~ai_supercomputer_management_client.models.CustomImage
    :param version: Version of the TensorFlow image.
    :type version: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'custom_image': {'key': 'customImage', 'type': 'CustomImage'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        custom_image: Optional["CustomImage"] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(TensorFlowFrameworkImage, self).__init__(custom_image=custom_image, **kwargs)
        self.kind = 'TensorFlow'  # type: str
        self.version = version
