# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class StorageContainerOperations(object):
    """StorageContainerOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~ai_supercomputer_management_client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def _create_or_update_initial(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        system_data=None,  # type: Optional["models.ResourceSystemData"]
        provisioning_state=None,  # type: Optional[Union[str, "models.ProvisioningState"]]
        description=None,  # type: Optional[str]
        tier=None,  # type: Optional[Union[str, "models.StorageContainerTier"]]
        status=None,  # type: Optional[Union[str, "models.StorageContainerStatus"]]
        location=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["models.StorageContainerResourceDescription"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.StorageContainerResourceDescription"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.StorageContainerResourceDescription(system_data=system_data, provisioning_state=provisioning_state, description=description, tier=tier, status=status, location=location)
        api_version = "2020-12-01-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self._create_or_update_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
            'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
            'storageContainerResourceName': self._serialize.url("storage_container_resource_name", storage_container_resource_name, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'StorageContainerResourceDescription')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorModel, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _create_or_update_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def begin_create_or_update(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        system_data=None,  # type: Optional["models.ResourceSystemData"]
        provisioning_state=None,  # type: Optional[Union[str, "models.ProvisioningState"]]
        description=None,  # type: Optional[str]
        tier=None,  # type: Optional[Union[str, "models.StorageContainerTier"]]
        status=None,  # type: Optional[Union[str, "models.StorageContainerStatus"]]
        location=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["models.StorageContainerResourceDescription"]
        """Creates or updates a storage container resource.

        Creates a storage container resource with the specified name, description and properties. If a
        storage container resource with the same name exists, then it is updated with the specified
        description and properties.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :param storage_container_resource_name: The name of the Singularity storage container.
        :type storage_container_resource_name: str
        :param system_data:
        :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
        :param provisioning_state:
        :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
        :param description: User-friendly description of the storage container.
        :type description: str
        :param tier:
        :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
        :param status:
        :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
        :param location: Location for managed storag.
        :type location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either StorageContainerResourceDescription or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~ai_supercomputer_management_client.models.StorageContainerResourceDescription]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["models.StorageContainerResourceDescription"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._create_or_update_initial(
                resource_group_name=resource_group_name,
                account_name=account_name,
                storage_container_resource_name=storage_container_resource_name,
                system_data=system_data,
                provisioning_state=provisioning_state,
                description=description,
                tier=tier,
                status=status,
                location=location,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True: polling_method = ARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def _update_initial(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        tier,  # type: Union[str, "models.StorageContainerTier"]
        location,  # type: str
        system_data=None,  # type: Optional["models.ResourceSystemData"]
        provisioning_state=None,  # type: Optional[Union[str, "models.ProvisioningState"]]
        description=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.StorageContainerStatus"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["models.StorageContainerResourceDescription"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.StorageContainerResourceDescription"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _body = models.StorageContainerResourcePatchDescription(system_data=system_data, provisioning_state=provisioning_state, description=description, tier=tier, status=status, location=location)
        api_version = "2020-12-01-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self._update_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
            'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
            'storageContainerResourceName': self._serialize.url("storage_container_resource_name", storage_container_resource_name, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'StorageContainerResourcePatchDescription')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorModel, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _update_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def begin_update(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        tier,  # type: Union[str, "models.StorageContainerTier"]
        location,  # type: str
        system_data=None,  # type: Optional["models.ResourceSystemData"]
        provisioning_state=None,  # type: Optional[Union[str, "models.ProvisioningState"]]
        description=None,  # type: Optional[str]
        status=None,  # type: Optional[Union[str, "models.StorageContainerStatus"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["models.StorageContainerResourceDescription"]
        """Updates a storage container resource.

        If a storage container resource with the same name exists, then it is updated with the
        specified description and properties.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :param storage_container_resource_name: The name of the Singularity storage container.
        :type storage_container_resource_name: str
        :param tier:
        :type tier: str or ~ai_supercomputer_management_client.models.StorageContainerTier
        :param location: Location for managed storag.
        :type location: str
        :param system_data:
        :type system_data: ~ai_supercomputer_management_client.models.ResourceSystemData
        :param provisioning_state:
        :type provisioning_state: str or ~ai_supercomputer_management_client.models.ProvisioningState
        :param description: User-friendly description of the storage container.
        :type description: str
        :param status:
        :type status: str or ~ai_supercomputer_management_client.models.StorageContainerStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either StorageContainerResourceDescription or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~ai_supercomputer_management_client.models.StorageContainerResourceDescription]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["models.StorageContainerResourceDescription"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._update_initial(
                resource_group_name=resource_group_name,
                account_name=account_name,
                storage_container_resource_name=storage_container_resource_name,
                tier=tier,
                location=location,
                system_data=system_data,
                provisioning_state=provisioning_state,
                description=description,
                status=status,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True: polling_method = ARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def get(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.StorageContainerResourceDescription"
        """Gets a storage container resource.

        Gets the information about the storage container resource with the given name. The information
        include the description and other properties of the storage container.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :param storage_container_resource_name: The name of the Singularity storage container.
        :type storage_container_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: StorageContainerResourceDescription, or the result of cls(response)
        :rtype: ~ai_supercomputer_management_client.models.StorageContainerResourceDescription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.StorageContainerResourceDescription"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-12-01-preview"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
            'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
            'storageContainerResourceName': self._serialize.url("storage_container_resource_name", storage_container_resource_name, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorModel, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def _delete_initial(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-12-01-preview"

        # Construct URL
        url = self._delete_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
            'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
            'storageContainerResourceName': self._serialize.url("storage_container_resource_name", storage_container_resource_name, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorModel, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    _delete_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def begin_delete(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller[None]
        """Deletes the storage container resource.

        Deletes the storage container resource identified by the name.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :param storage_container_resource_name: The name of the Singularity storage container.
        :type storage_container_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._delete_initial(
                resource_group_name=resource_group_name,
                account_name=account_name,
                storage_container_resource_name=storage_container_resource_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            if cls:
                return cls(pipeline_response, None, {})

        if polling is True: polling_method = ARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}'}  # type: ignore

    def list_by_account(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.StorageContainerResourceDescriptionList"]
        """Gets all the storage container resources in a given account.

        Gets the information about all storage container resources in a given account. The information
        include the description and other properties of the storage container.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either StorageContainerResourceDescriptionList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~ai_supercomputer_management_client.models.StorageContainerResourceDescriptionList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.StorageContainerResourceDescriptionList"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-12-01-preview"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_by_account.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
                    'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('StorageContainerResourceDescriptionList', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.ErrorModel, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_account.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers'}  # type: ignore

    def _resume_initial(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["models.StorageContainerResourceDescription"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.StorageContainerResourceDescription"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-12-01-preview"

        # Construct URL
        url = self._resume_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
            'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
            'storageContainerResourceName': self._serialize.url("storage_container_resource_name", storage_container_resource_name, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorModel, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _resume_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}/resume'}  # type: ignore

    def begin_resume(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["models.StorageContainerResourceDescription"]
        """Resumes the storage container resource.

        Resumes the storage container resource identified by the name.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :param storage_container_resource_name: The name of the Singularity storage container.
        :type storage_container_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either StorageContainerResourceDescription or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~ai_supercomputer_management_client.models.StorageContainerResourceDescription]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["models.StorageContainerResourceDescription"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._resume_initial(
                resource_group_name=resource_group_name,
                account_name=account_name,
                storage_container_resource_name=storage_container_resource_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True: polling_method = ARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_resume.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}/resume'}  # type: ignore

    def _suspend_initial(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["models.StorageContainerResourceDescription"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["models.StorageContainerResourceDescription"]]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-12-01-preview"

        # Construct URL
        url = self._suspend_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', skip_quote=True),
            'accountName': self._serialize.url("account_name", account_name, 'str', skip_quote=True),
            'storageContainerResourceName': self._serialize.url("storage_container_resource_name", storage_container_resource_name, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorModel, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    _suspend_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}/suspend'}  # type: ignore

    def begin_suspend(
        self,
        resource_group_name,  # type: str
        account_name,  # type: str
        storage_container_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["models.StorageContainerResourceDescription"]
        """Suspends the storage container resource.

        Suspends the storage container resource identified by the name.

        :param resource_group_name: The name of the resource group within the user's subscription.
        :type resource_group_name: str
        :param account_name: The name of the Singularity account.
        :type account_name: str
        :param storage_container_resource_name: The name of the Singularity storage container.
        :type storage_container_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either StorageContainerResourceDescription or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~ai_supercomputer_management_client.models.StorageContainerResourceDescription]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["models.StorageContainerResourceDescription"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._suspend_initial(
                resource_group_name=resource_group_name,
                account_name=account_name,
                storage_container_resource_name=storage_container_resource_name,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('StorageContainerResourceDescription', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True: polling_method = ARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_suspend.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.AISupercomputer/accounts/{accountName}/storagecontainers/{storageContainerResourceName}/suspend'}  # type: ignore
